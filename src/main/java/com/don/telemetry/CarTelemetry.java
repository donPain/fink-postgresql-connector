/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.don.telemetry;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CarTelemetry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7853536515467754880L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CarTelemetry\",\"namespace\":\"com.don.telemetry\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"The vehicle's latitude in decimal degrees\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"The vehicle's longitude in decimal degrees\"},{\"name\":\"speed\",\"type\":\"double\",\"doc\":\"The current speed of the vehicle in km/h\"},{\"name\":\"sensorTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"The timestamp of the sensor reading in milliseconds since Unix epoch\"},{\"name\":\"plate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The plate of car\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<CarTelemetry> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CarTelemetry> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CarTelemetry> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CarTelemetry> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CarTelemetry> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CarTelemetry to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CarTelemetry from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CarTelemetry instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CarTelemetry fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The vehicle's latitude in decimal degrees */
  private double latitude;
  /** The vehicle's longitude in decimal degrees */
  private double longitude;
  /** The current speed of the vehicle in km/h */
  private double speed;
  /** The timestamp of the sensor reading in milliseconds since Unix epoch */
  private java.time.Instant sensorTimestamp;
  /** The plate of car */
  private java.lang.String plate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CarTelemetry() {}

  /**
   * All-args constructor.
   * @param latitude The vehicle's latitude in decimal degrees
   * @param longitude The vehicle's longitude in decimal degrees
   * @param speed The current speed of the vehicle in km/h
   * @param sensorTimestamp The timestamp of the sensor reading in milliseconds since Unix epoch
   * @param plate The plate of car
   */
  public CarTelemetry(java.lang.Double latitude, java.lang.Double longitude, java.lang.Double speed, java.time.Instant sensorTimestamp, java.lang.String plate) {
    this.latitude = latitude;
    this.longitude = longitude;
    this.speed = speed;
    this.sensorTimestamp = sensorTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.plate = plate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return latitude;
    case 1: return longitude;
    case 2: return speed;
    case 3: return sensorTimestamp;
    case 4: return plate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: latitude = (java.lang.Double)value$; break;
    case 1: longitude = (java.lang.Double)value$; break;
    case 2: speed = (java.lang.Double)value$; break;
    case 3: sensorTimestamp = (java.time.Instant)value$; break;
    case 4: plate = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The vehicle's latitude in decimal degrees
   */
  public double getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * The vehicle's latitude in decimal degrees
   * @param value the value to set.
   */
  public void setLatitude(double value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The vehicle's longitude in decimal degrees
   */
  public double getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * The vehicle's longitude in decimal degrees
   * @param value the value to set.
   */
  public void setLongitude(double value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The current speed of the vehicle in km/h
   */
  public double getSpeed() {
    return speed;
  }


  /**
   * Sets the value of the 'speed' field.
   * The current speed of the vehicle in km/h
   * @param value the value to set.
   */
  public void setSpeed(double value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'sensorTimestamp' field.
   * @return The timestamp of the sensor reading in milliseconds since Unix epoch
   */
  public java.time.Instant getSensorTimestamp() {
    return sensorTimestamp;
  }


  /**
   * Sets the value of the 'sensorTimestamp' field.
   * The timestamp of the sensor reading in milliseconds since Unix epoch
   * @param value the value to set.
   */
  public void setSensorTimestamp(java.time.Instant value) {
    this.sensorTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'plate' field.
   * @return The plate of car
   */
  public java.lang.String getPlate() {
    return plate;
  }


  /**
   * Sets the value of the 'plate' field.
   * The plate of car
   * @param value the value to set.
   */
  public void setPlate(java.lang.String value) {
    this.plate = value;
  }

  /**
   * Creates a new CarTelemetry RecordBuilder.
   * @return A new CarTelemetry RecordBuilder
   */
  public static com.don.telemetry.CarTelemetry.Builder newBuilder() {
    return new com.don.telemetry.CarTelemetry.Builder();
  }

  /**
   * Creates a new CarTelemetry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CarTelemetry RecordBuilder
   */
  public static com.don.telemetry.CarTelemetry.Builder newBuilder(com.don.telemetry.CarTelemetry.Builder other) {
    if (other == null) {
      return new com.don.telemetry.CarTelemetry.Builder();
    } else {
      return new com.don.telemetry.CarTelemetry.Builder(other);
    }
  }

  /**
   * Creates a new CarTelemetry RecordBuilder by copying an existing CarTelemetry instance.
   * @param other The existing instance to copy.
   * @return A new CarTelemetry RecordBuilder
   */
  public static com.don.telemetry.CarTelemetry.Builder newBuilder(com.don.telemetry.CarTelemetry other) {
    if (other == null) {
      return new com.don.telemetry.CarTelemetry.Builder();
    } else {
      return new com.don.telemetry.CarTelemetry.Builder(other);
    }
  }

  /**
   * RecordBuilder for CarTelemetry instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CarTelemetry>
    implements org.apache.avro.data.RecordBuilder<CarTelemetry> {

    /** The vehicle's latitude in decimal degrees */
    private double latitude;
    /** The vehicle's longitude in decimal degrees */
    private double longitude;
    /** The current speed of the vehicle in km/h */
    private double speed;
    /** The timestamp of the sensor reading in milliseconds since Unix epoch */
    private java.time.Instant sensorTimestamp;
    /** The plate of car */
    private java.lang.String plate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.don.telemetry.CarTelemetry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.sensorTimestamp)) {
        this.sensorTimestamp = data().deepCopy(fields()[3].schema(), other.sensorTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.plate)) {
        this.plate = data().deepCopy(fields()[4].schema(), other.plate);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing CarTelemetry instance
     * @param other The existing instance to copy.
     */
    private Builder(com.don.telemetry.CarTelemetry other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.latitude)) {
        this.latitude = data().deepCopy(fields()[0].schema(), other.latitude);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.longitude)) {
        this.longitude = data().deepCopy(fields()[1].schema(), other.longitude);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.speed)) {
        this.speed = data().deepCopy(fields()[2].schema(), other.speed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sensorTimestamp)) {
        this.sensorTimestamp = data().deepCopy(fields()[3].schema(), other.sensorTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.plate)) {
        this.plate = data().deepCopy(fields()[4].schema(), other.plate);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'latitude' field.
      * The vehicle's latitude in decimal degrees
      * @return The value.
      */
    public double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * The vehicle's latitude in decimal degrees
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder setLatitude(double value) {
      validate(fields()[0], value);
      this.latitude = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * The vehicle's latitude in decimal degrees
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'latitude' field.
      * The vehicle's latitude in decimal degrees
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder clearLatitude() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * The vehicle's longitude in decimal degrees
      * @return The value.
      */
    public double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * The vehicle's longitude in decimal degrees
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder setLongitude(double value) {
      validate(fields()[1], value);
      this.longitude = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * The vehicle's longitude in decimal degrees
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'longitude' field.
      * The vehicle's longitude in decimal degrees
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder clearLongitude() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * The current speed of the vehicle in km/h
      * @return The value.
      */
    public double getSpeed() {
      return speed;
    }


    /**
      * Sets the value of the 'speed' field.
      * The current speed of the vehicle in km/h
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder setSpeed(double value) {
      validate(fields()[2], value);
      this.speed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * The current speed of the vehicle in km/h
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'speed' field.
      * The current speed of the vehicle in km/h
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder clearSpeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensorTimestamp' field.
      * The timestamp of the sensor reading in milliseconds since Unix epoch
      * @return The value.
      */
    public java.time.Instant getSensorTimestamp() {
      return sensorTimestamp;
    }


    /**
      * Sets the value of the 'sensorTimestamp' field.
      * The timestamp of the sensor reading in milliseconds since Unix epoch
      * @param value The value of 'sensorTimestamp'.
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder setSensorTimestamp(java.time.Instant value) {
      validate(fields()[3], value);
      this.sensorTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sensorTimestamp' field has been set.
      * The timestamp of the sensor reading in milliseconds since Unix epoch
      * @return True if the 'sensorTimestamp' field has been set, false otherwise.
      */
    public boolean hasSensorTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sensorTimestamp' field.
      * The timestamp of the sensor reading in milliseconds since Unix epoch
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder clearSensorTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'plate' field.
      * The plate of car
      * @return The value.
      */
    public java.lang.String getPlate() {
      return plate;
    }


    /**
      * Sets the value of the 'plate' field.
      * The plate of car
      * @param value The value of 'plate'.
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder setPlate(java.lang.String value) {
      validate(fields()[4], value);
      this.plate = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'plate' field has been set.
      * The plate of car
      * @return True if the 'plate' field has been set, false otherwise.
      */
    public boolean hasPlate() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'plate' field.
      * The plate of car
      * @return This builder.
      */
    public com.don.telemetry.CarTelemetry.Builder clearPlate() {
      plate = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CarTelemetry build() {
      try {
        CarTelemetry record = new CarTelemetry();
        record.latitude = fieldSetFlags()[0] ? this.latitude : (java.lang.Double) defaultValue(fields()[0]);
        record.longitude = fieldSetFlags()[1] ? this.longitude : (java.lang.Double) defaultValue(fields()[1]);
        record.speed = fieldSetFlags()[2] ? this.speed : (java.lang.Double) defaultValue(fields()[2]);
        record.sensorTimestamp = fieldSetFlags()[3] ? this.sensorTimestamp : (java.time.Instant) defaultValue(fields()[3]);
        record.plate = fieldSetFlags()[4] ? this.plate : (java.lang.String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CarTelemetry>
    WRITER$ = (org.apache.avro.io.DatumWriter<CarTelemetry>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CarTelemetry>
    READER$ = (org.apache.avro.io.DatumReader<CarTelemetry>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










